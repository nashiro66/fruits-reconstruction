import os
import sys
from pathlib import Path
from pathlib import Path
import mitsuba as mi
import drjit as dr

def set_root_path():
    if os.getcwd().endswith('figures'): 
        os.chdir('../')

def update_light_position(params, camera_idx, light_idx):
    light_positions = [
        ["-6.500000 0.000001 0.000000 0.300000 0.000001 9.463850 0.043578 4.256886 -0.000001 0.827979 -0.498097 19.423895 0.000000 0.000000 0.000000 1.000000"],
        ["-6.500000 0.000001 -0.000000 0.300000 0.000001 9.463849 -0.043578 7.743114 -0.000000 -0.827981 -0.498097 19.423895 0.000000 0.000000 0.000000 1.000000"],
        ["-6.351649 -0.211373 -0.105630 4.525181 -0.000001 9.447746 -0.052370 8.094799 1.380779 -0.972320 -0.485901 18.936043 0.000000 0.000000 0.000000 1.000000"],
        ["-6.351649 -0.556664 -0.102093 4.383719 0.000001 9.131430 -0.137921 11.516834 1.380779 -2.560687 -0.469633 18.285309 0.000000 0.000000 0.000000 1.000000"],
        ["-6.495393 -0.169092 0.016586 -0.363436 0.000000 8.371056 0.236406 -3.456229 -0.244695 4.488523 -0.440270 17.110783 0.000000 0.000000 0.000000 1.000000"],
        ["-6.495393 -0.111801 0.017879 -0.415173 0.000000 9.023856 0.156308 -0.252319 -0.244695 2.967747 -0.474603 18.484127 0.000000 0.000000 0.000000 1.000000"],
        ["-6.168086 0.894502 0.150544 -5.721768 0.000001 9.066978 -0.149236 11.969419 -2.050541 -2.690685 -0.452841 17.613653 0.000000 0.000000 0.000000 1.000000"],
        ["-6.168086 1.377602 0.140082 -5.303277 -0.000001 8.436855 -0.229835 15.193392 -2.050540 -4.143872 -0.421370 16.354818 0.000000 0.000000 0.000000 1.000000"],
        ["-5.463686 0.935475 -0.266341 10.953645 0.000001 9.341724 0.090889 2.364422 3.521098 1.451574 -0.413281 16.031258 0.000000 0.000000 0.000000 1.000000"],
        ["-5.463686 0.042519 -0.270844 11.133778 0.000000 9.499676 0.004131 5.834756 3.521098 0.065975 -0.420269 16.310770 0.000000 0.000000 0.000000 1.000000"],
        ["-5.470313 -2.083904 0.246786 -9.571454 -0.000000 8.681257 0.203064 -2.122541 -3.510794 3.247016 -0.384528 14.881118 0.000000 0.000000 0.000000 1.000000"],
        ["-5.470313 -1.238018 0.262083 -10.183308 -0.000000 9.219341 0.120637 1.174509 -3.510794 1.929006 -0.408362 15.834473 0.000000 0.000000 0.000000 1.000000"],
        ["-6.340923 -1.176577 -0.090842 3.933682 -0.000001 7.849671 -0.281629 17.265163 1.429231 -5.219994 -0.403030 15.621183 0.000000 0.000000 0.000000 1.000000"],
        ["-6.340923 -1.458418 -0.078709 3.448351 -0.000001 6.801235 -0.349091 19.963663 1.429231 -6.470412 -0.349199 13.467967 0.000000 0.000000 0.000000 1.000000"],
        ["-5.923949 2.686243 -0.149531 6.281228 0.000000 6.902987 0.343514 -7.740579 2.675224 5.948349 -0.331117 12.744678 0.000000 0.000000 0.000000 1.000000"],
        ["-5.923949 2.152086 -0.171810 7.172383 0.000000 7.931477 0.275207 -5.008269 2.675225 4.765522 -0.380451 14.718030 0.000000 0.000000 0.000000 1.000000"],
        ["-4.525468 1.147743 0.353791 -13.851655 0.000001 9.364478 -0.084154 9.366148 -4.665848 -1.113209 -0.343147 13.225879 0.000000 0.000000 0.000000 1.000000"],
        ["-4.525468 2.297574 0.337927 -13.217074 0.000001 8.944562 -0.168461 12.738428 -4.665848 -2.228446 -0.327760 12.610391 0.000000 0.000000 0.000000 1.000000"],
        ["-4.304458 -1.502714 -0.366210 14.948386 -0.000001 9.285907 -0.105551 10.222051 4.870486 -1.328073 -0.323650 12.446008 0.000000 0.000000 0.000000 1.000000"],
        ["-4.304458 -2.688124 -0.346912 14.176490 -0.000000 8.796587 -0.188815 13.552604 4.870486 -2.375720 -0.306595 11.763819 0.000000 0.000000 0.000000 1.000000"],
        ["-5.629382 -3.737132 0.154266 -5.870659 -0.000000 5.862804 0.393428 -9.737112 -3.249624 6.473900 -0.267239 10.189544 0.000000 0.000000 0.000000 1.000000"],
        ["-5.629383 -3.171381 0.186078 -7.143115 0.000001 7.071776 0.333868 -7.354734 -3.249623 5.493844 -0.322346 12.393842 0.000000 0.000000 0.000000 1.000000"],
        ["-5.920269 2.904059 0.138724 -5.248968 -0.000001 6.384693 -0.370242 20.809698 -2.683361 -6.407195 -0.306066 11.742624 0.000000 0.000000 0.000000 1.000000"],
        ["-5.920268 3.317635 0.110075 -4.103014 -0.000001 5.066149 -0.422970 22.918791 -2.683361 -7.319661 -0.242858 9.214321 0.000000 0.000000 0.000000 1.000000"],
        ["-3.675667 3.982092 -0.355149 14.505958 -0.000000 8.181595 0.254116 -4.164632 5.360921 2.730285 -0.243505 9.240179 0.000000 0.000000 0.000000 1.000000"],
        ["-3.675665 2.749846 -0.386147 15.745892 -0.000000 8.895706 0.175480 -1.019221 5.360922 1.885407 -0.264758 10.090327 0.000000 0.000000 0.000000 1.000000"],
        ["4.302105 4.040664 0.308638 -12.045526 0.000000 7.822740 -0.283697 17.347885 -4.872565 3.567601 0.272504 -11.400165 0.000000 0.000000 0.000000 1.000000"],
        ["4.302105 4.997573 0.267020 -10.380803 -0.000001 6.767889 -0.350882 20.035282 -4.872565 4.412477 0.235758 -9.930341 0.000000 0.000000 0.000000 1.000000"],
        ["3.592300 1.295391 -0.411088 16.743504 0.000000 9.371982 0.081807 2.727713 5.417138 -0.859021 0.272607 -11.404284 0.000000 0.000000 0.000000 1.000000"],
        ["3.592300 -0.080595 -0.416681 16.967253 -0.000000 9.499508 -0.005090 6.203589 5.417138 0.053446 0.276316 -11.552661 0.000000 0.000000 0.000000 1.000000"],
        ["4.405418 -3.922639 0.304200 -11.868016 -0.000000 7.860623 0.280781 -5.231261 -4.779361 -3.615728 0.280399 -11.715981 0.000000 0.000000 0.000000 1.000000"],
        ["4.405419 -2.859393 0.335429 -13.117176 -0.000001 8.667589 0.204675 -2.186986 -4.779360 -2.635674 0.309185 -12.867406 0.000000 0.000000 0.000000 1.000000"],
        ["6.349392 -1.428477 -0.076148 3.345920 0.000000 6.760215 -0.351292 20.051666 1.391122 6.519889 0.347557 -14.402270 0.000000 0.000000 0.000000 1.000000"],
        ["6.349392 -1.658011 -0.061936 2.777431 0.000000 5.498490 -0.407739 22.309555 1.391121 7.567536 0.282689 -11.807554 0.000000 0.000000 0.000000 1.000000"],
        ["5.611467 3.314237 -0.182346 7.593843 -0.000000 6.864805 0.345627 -7.825098 3.280463 -5.669240 0.311916 -12.976642 0.000000 0.000000 0.000000 1.000000"],
        ["5.611467 2.662270 -0.209866 8.694635 -0.000000 7.900847 0.277637 -5.105463 3.280463 -4.554003 0.358991 -14.859627 0.000000 0.000000 0.000000 1.000000"],
        ["4.724389 0.643503 0.341735 -13.369398 0.000000 9.453685 -0.049312 7.972491 -4.464319 0.680991 0.361643 -14.965714 0.000000 0.000000 0.000000 1.000000"],
        ["4.724389 1.761219 0.330662 -12.926480 -0.000000 9.147366 -0.134964 11.398556 -4.464319 1.863818 0.349925 -14.496994 0.000000 0.000000 0.000000 1.000000"],
        ["5.144022 -1.248804 -0.298507 12.240272 -0.000000 9.277763 -0.107517 10.300671 3.973542 1.616662 0.386437 -15.957498 0.000000 0.000000 0.000000 1.000000"],
        ["5.144021 -2.214701 -0.282559 11.602341 -0.000000 8.782081 -0.190676 13.627053 3.973543 2.867082 0.365791 -15.131652 0.000000 0.000000 0.000000 1.000000"],
        ["6.284044 -1.547502 0.098501 -3.640021 0.000000 7.321308 0.318621 -6.744834 -1.661563 -5.852664 0.372530 -15.401193 0.000000 0.000000 0.000000 1.000000"],
        ["6.284044 -1.199007 0.111147 -4.145891 -0.000000 8.261312 0.246868 -3.874722 -1.661563 -4.534657 0.420360 -17.314398 0.000000 0.000000 0.000000 1.000000"],
        ["6.310709 0.978995 0.108138 -4.025527 -0.000000 8.576200 -0.215075 14.602983 -1.557224 3.967413 0.438234 -18.029364 0.000000 0.000000 0.000000 1.000000"],
        ["6.310709 1.320904 0.097548 -3.601917 0.000000 7.736308 -0.290188 17.607529 -1.557224 5.353014 0.395317 -16.312666 0.000000 0.000000 0.000000 1.000000"],
        ["5.828282 1.219112 -0.211858 8.774317 0.000000 9.092155 0.144930 0.202795 2.877695 -2.469104 0.429082 -17.663288 0.000000 0.000000 0.000000 1.000000"],
        ["5.828282 0.501605 -0.219781 9.091249 0.000000 9.432195 0.059632 3.614733 2.877695 -1.015916 0.445130 -18.305183 0.000000 0.000000 0.000000 1.000000"],
        ["6.010379 -0.733246 0.186428 -7.157109 -0.000000 9.302770 0.101355 1.945809 -2.474943 -1.780682 0.452738 -18.609531 0.000000 0.000000 0.000000 1.000000"],
        ["6.010379 -0.107023 0.190297 -7.311876 0.000000 9.495841 0.014793 5.408261 -2.474943 -0.259904 0.462134 -18.985380 0.000000 0.000000 0.000000 1.000000"],
        ["6.428964 -0.222036 -0.072786 3.211456 -0.000000 9.379875 -0.079262 9.170454 0.958341 1.489511 0.488282 -20.031301 0.000000 0.000000 0.000000 1.000000"],
        ["6.428964 -0.458807 -0.069651 3.086054 -0.000000 8.975866 -0.163783 12.551336 0.958341 3.077875 0.467251 -19.190050 0.000000 0.000000 0.000000 1.000000"],
        ["6.500000 0.000000 0.000000 0.300000 0.000000 9.463850 0.043578 4.256886 0.000000 -0.827979 0.498097 -20.423895 0.000000 0.000000 0.000000 1.000000"],
        ["6.500000 0.000000 0.000000 0.300000 0.000000 9.463850 -0.043578 7.743114 0.000000 0.827980 0.498097 -20.423895 0.000000 0.000000 0.000000 1.000000"],
    ]
    raw_string = light_positions[camera_idx * 2 + light_idx][0]
    float_values = list(map(float, raw_string.strip().split()))
    matrix_4x4 = np.array(float_values).reshape((4, 4))
    params['arealight.to_world'] = mi.Transform4f(matrix_4x4)
    params.update()

def save_images(scene, params, dir, spp):
    print("start rendering")
    for i, sensor in enumerate(scene.sensors()):
      for j in range(2):
        update_light_position(params, i, j)
        image = mi.render(scene, sensor=sensor, spp=spp)
        bitmap = mi.Bitmap(image).convert(
            pixel_format=mi.Bitmap.PixelFormat.RGB,
            component_format=mi.Struct.Type.UInt8,
            srgb_gamma=True
        )
        png_path = dir / f"view_{i:02d}_{j:02d}.png"
        bitmap.write(str(png_path))

        bitmap = mi.Bitmap(image).convert(
                pixel_format=mi.Bitmap.PixelFormat.RGB,
                component_format=mi.Struct.Type.Float32,
                srgb_gamma=False
        )
        exr_path = dir / f"view_{i:02d}_{j:02d}.exr"
        bitmap.write(str(exr_path))
        print(f"saving: {i}")
    print(f"Saved: {dir}")

def optimize(scene, params, opt, ref_images, spp):
   for it in range(iteration_count):
    total_loss = 0.0
    for i, sensor in enumerate(scene.sensors()):
        for j in range(2):
            update_light_position(params, i, j)
            img = mi.render(scene, params, sensor=sensor, spp=spp, seed=it)
            loss = dr.mean(dr.sqr(img - ref_images[i*2+j]))
            dr.backward(loss)
            opt.step()
            opt[key1] = dr.clip(opt[key1], 1e-6, 100.0)
            opt[key2] = dr.clip(opt[key2], 1e-6, 100.0)
            params.update(opt)
            total_loss += loss
            print(f"Sensor {i:02d} Light {j}: error={dr.mean(loss)}")
    print(f"Iteration {it:02d}: error={dr.mean(total_loss)}")

ref_spp=4096
opt_spp=128

key1="medium1.sigma_t.data"
key2="medium1.albedo.data"

set_root_path()
sys.path.append('python/')
sys.path = [p for p in sys.path if "unbiased-inverse-volume-rendering" not in p]
print(os.getcwd())
print(sys.executable)
os.environ.pop("PYTHONPATH")

# from practical_reconstruction import scene_configuration
mi.set_variant('cuda_ad_rgb')

# from practical_reconstruction import optimization_cli
# from core import integrators
# from core import bsdfs
# from core import textures
# from practical_reconstruction import scene_preparation

# integrators.register()
# bsdfs.register()
# textures.register()

import numpy as np

ref_scene_path="third_party/kiwi_ours/mts_scene/240_ref.xml"
ref_dir=Path("third_party/kiwi_ours/references")

ref_scene = mi.load_file(ref_scene_path)
ref_params = mi.traverse(ref_scene)
# print(ref_params)
#print(ref_scene)
save_images(ref_scene, ref_params, ref_dir, ref_spp)

init_scene_path="third_party/kiwi_ours/mts_scene/240_init.xml"
init_scene = mi.load_file(init_scene_path)

ref_images=[]
for i, sensor in enumerate(init_scene.sensors()):
    for j in range(2):
        exr_path = ref_dir / f"view_{i:02d}_{j:02d}.exr"
        bmp = mi.Bitmap(str(exr_path))
        tensor = mi.TensorXf(bmp)
        ref_image = mi.Bitmap(tensor)
        ref_images.append(tensor)

params = mi.traverse(init_scene)

opt = mi.ad.Adam(lr=0.02)
opt[key1] = params[key1]
opt[key2] = params[key2]
params.update(opt)
iteration_count = 2
optimize(init_scene, params, opt, ref_images, opt_spp)

opt[key1] = dr.upsample(opt[key1], shape=(74, 60, 64))
opt[key2] = dr.upsample(opt[key2], shape=(34, 18, 18))
params.update(opt)
optimize(init_scene, params, opt, ref_images, opt_spp)

opt_spp*=2
opt[key1] = dr.upsample(opt[key1], shape=(148, 120, 128))
opt[key2] = dr.upsample(opt[key2], shape=(68, 36, 36))
params.update(opt)
optimize(init_scene, params, opt, ref_images, opt_spp)
sigma_t = opt[key1]
albedo = opt[key2]
grid_sigma_t = mi.VolumeGrid(sigma_t)
grid_sigma_t.write('third_party/kiwi_ours/intermediate/sigma_t.vol')
grid_albedo = mi.VolumeGrid(albedo)
grid_albedo.write('third_party/kiwi_ours/intermediate/albedo.vol')
save_images(init_scene, params, Path("third_party/kiwi_ours/intermediate"), ref_spp)

opt_spp*=2
opt[key1] = dr.upsample(opt[key1], shape=(296, 240, 256))
opt[key2] = dr.upsample(opt[key2], shape=(136, 72, 72))
params.update(opt)
optimize(init_scene, params, opt, ref_images, opt_spp)
sigma_t = opt[key1]
albedo = opt[key2]
grid_sigma_t = mi.VolumeGrid(sigma_t)
grid_sigma_t.write('third_party/kiwi_ours/intermediate2/sigma_t.vol')
grid_albedo = mi.VolumeGrid(albedo)
grid_albedo.write('third_party/kiwi_ours/intermediate2/albedo.vol')
save_images(init_scene, params, Path("third_party/kiwi_ours/intermediate2"), opt_spp)

opt_spp*=2
opt[key1] = dr.upsample(opt[key1], shape=(592, 480, 512))
opt[key2] = dr.upsample(opt[key2], shape=(272, 144, 144))
params.update(opt)
optimize(init_scene, params, opt, ref_images, opt_spp)
sigma_t = opt[key1]
albedo = opt[key2]
grid_sigma_t = mi.VolumeGrid(sigma_t)
grid_sigma_t.write('third_party/kiwi_ours/output/sigma_t.vol')
grid_albedo = mi.VolumeGrid(albedo)
grid_albedo.write('third_party/kiwi_ours/output/albedo.vol')
save_images(init_scene, params, Path("third_party/kiwi_ours/output"), opt_spp)